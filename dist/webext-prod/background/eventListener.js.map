{"mappings":"MAAA,IAAOA,ECGAC,EC8BA,SAASC,GAjChBC,MAkCAA,EAlCAC,KAmCAA,EAnCAC,SAoCAA,IAEE,MAAO,CACLC,KAAM,CAvCVD,SAwCMA,EACAE,UAAW,QACXC,OAAQ,CACNC,MAAON,EACPO,KAAMN,GAERO,QAAS,CACPC,gBAAgB,EAChBC,eAAgB,OAChBC,sBAAuB,CACrBT,SAAU,KACVU,eAAe,EACfC,gBAAgB,IAGpBC,KAAM,KAKL,SAASC,EAAQC,GACtB,OCtDK,SAAsBA,GACzB,MAAMC,EAAOC,KAAKC,UAAU,IACrBH,EACHI,QAAS,IAGb,OAAOC,MAAM,wBAAyB,CAClCC,OAAQ,OAdhBL,KAeQA,ID8CCM,CAAa,CAChBC,OAAQ3B,EAAW4B,QACnBT,OAAQjB,EAAwBiB,eF/D1BnB,GAAAA,EACD,QAAG,WADFA,IAAAA,EAAU,cCGVC,GAAAA,EAAAA,EACD,QAAP,GAAA,UADQA,EAAAA,EAEO,gBAAf,GAAA,mBAFQA,IAAAA,EAAW,KGCvB4B,OAAOC,QAAQC,UAAUC,aAAYC,eAAgBC,GACjD,OAAQA,EAAQC,MACZ,KAAKlC,EAAYmC,QAAS,CACtB,MAAMC,QAAiBnB,EAAQgB,EAAQI,SACjClB,QAA2BiB,EAASE,OAE1C,IAAIC,EAAsB,aACP,OAAfpB,EAAKqB,QACPD,EAAsBpB,EAAKqB,MAC3BC,QAAQD,MAAMrB,EAAKqB,QAGrBZ,OAAOc,cAAcC,OAAO,GAAI,CAC9BV,QAASM,EACTK,QAAS,kBACTC,MAAO,gBACPX,KAAM,UAGRN,OAAOkB,KAAKC,MAAM,CAACC,QAAQ,EAAMC,eAAe,IAAO,SAASH,GAC5D,MAAOI,GAAOJ,EACd,QAAYK,IAARD,EACA,OAGJ,MAAME,EAAQF,EAAIG,QACJF,IAAVC,GAIJxB,OAAOkB,KAAKQ,YAAYF,EAAO,CAC3BlB,KAAMlC,EAAYuD,gBAClBlB,QAASlB,OAGjB","sources":["src/extension/anki/actions.ts","src/extension/messages.ts","src/extension/anki/addNote.ts","src/extension/anki/invokeAction.ts","src/extension/background/eventListener.ts"],"sourcesContent":["export enum ActionType {\r\n    AddNote = \"addNote\",\r\n}\r\n\r\n","import { BasicAddNoteParams } from \"./anki/addNote\";\r\nimport { AnkiResponse } from \"./anki/response\";\r\n\r\nexport enum MessageType {\r\n    addNote,\r\n    addNoteResponse,\r\n}\r\n\r\nexport interface AddNoteMessage {\r\n    type: MessageType.addNote,\r\n    payload: BasicAddNoteParams,\r\n}\r\n\r\nexport interface AddNoteResponseMessage {\r\n    type: MessageType.addNoteResponse,\r\n    payload: AnkiResponse,\r\n}\r\n\r\nexport type Messsage =\r\n | AddNoteMessage\r\n | AddNoteResponseMessage\r\n;","import { invokeAction } from \"./invokeAction\";\r\nimport { ActionType } from \"./actions\";\r\n\r\n/**\r\n * @see __addNote__ in [docs](https://foosoft.net/projects/anki-connect/#note-actions)\r\n */\r\nexport interface AddNoteParams {\r\n  note: {\r\n    deckName: string;\r\n    modelName: \"Basic\";\r\n    fields: {\r\n      Front: string;\r\n      Back: string;\r\n    };\r\n    options?: {\r\n      allowDuplicate: false;\r\n      duplicateScope: \"deck\";\r\n      duplicateScopeOptions: {\r\n        deckName?: string | null;\r\n        checkChildren?: boolean;\r\n        checkAllModels: boolean;\r\n      };\r\n    };\r\n    tags?: string[];\r\n  };\r\n}\r\n\r\nexport interface BasicAddNoteParams {\r\n    deckName: AddNoteParams[\"note\"][\"deckName\"],\r\n    front: AddNoteParams[\"note\"][\"fields\"][\"Front\"],\r\n    back: AddNoteParams[\"note\"][\"fields\"][\"Back\"]\r\n}\r\n\r\nexport function getDefaultAddNoteParams({\r\nfront,\r\nback,\r\ndeckName\r\n}: BasicAddNoteParams): AddNoteParams {\r\n  return {\r\n    note: {\r\n      deckName,\r\n      modelName: \"Basic\",\r\n      fields: {\r\n        Front: front,\r\n        Back: back,\r\n      },\r\n      options: {\r\n        allowDuplicate: false,\r\n        duplicateScope: \"deck\",\r\n        duplicateScopeOptions: {\r\n          deckName: null,\r\n          checkChildren: false,\r\n          checkAllModels: false,\r\n        },\r\n      },\r\n      tags: [],\r\n    },\r\n  };\r\n}\r\n\r\nexport function addNote(params: BasicAddNoteParams) {\r\n  return invokeAction({\r\n      action: ActionType.AddNote,\r\n      params: getDefaultAddNoteParams(params),\r\n  });\r\n}\r\n","import { ActionType } from \"./actions\";\r\n\r\nexport interface InvokeActionParams {\r\n    action: ActionType.AddNote,\r\n    params: object,\r\n}\r\n\r\nexport function invokeAction(params: InvokeActionParams) {\r\n    const body = JSON.stringify({\r\n        ...params,\r\n        version: 6,\r\n    });\r\n    \r\n    return fetch(\"http://127.0.0.1:8765\", {\r\n        method: \"POST\",\r\n        body,\r\n    });\r\n}","import { addNote } from \"../anki\";\r\nimport { AnkiResponse } from \"../anki/response\";\r\nimport { AddNoteResponseMessage, MessageType, Messsage } from \"../messages\";\r\n\r\nchrome.runtime.onMessage.addListener(async function (message: Messsage) {\r\n    switch (message.type) {\r\n        case MessageType.addNote: {\r\n            const response = await addNote(message.payload);\r\n            const body: AnkiResponse = await response.json();\r\n\r\n            let notificationMessage = \"Note added\";\r\n            if (body.error !== null) {\r\n              notificationMessage = body.error;\r\n              console.error(body.error);\r\n            }\r\n    \r\n            chrome.notifications.create(\"\", {\r\n              message: notificationMessage,\r\n              iconUrl: \"images/logo.png\",\r\n              title: \"Wiktionary ++\",\r\n              type: \"basic\",\r\n            });\r\n\r\n            chrome.tabs.query({active: true, currentWindow: true}, function(tabs){\r\n                const [tab] = tabs;\r\n                if (tab === undefined) {\r\n                    return;\r\n                }\r\n\r\n                const tabId = tab.id;\r\n                if (tabId === undefined) {\r\n                    return;\r\n                }\r\n\r\n                chrome.tabs.sendMessage(tabId, {\r\n                    type: MessageType.addNoteResponse,\r\n                    payload: body,\r\n                } as AddNoteResponseMessage);  \r\n            });\r\n            break;\r\n        };\r\n    }\r\n  });"],"names":["$169dda80f8949f85$export$e4a712fff93fb00f","$89bfb1293656bf34$export$80edbf15fa61a4db","$9e16048665645004$export$b255b5c1d435d5f8","front","back","deckName","note","modelName","fields","Front","Back","options","allowDuplicate","duplicateScope","duplicateScopeOptions","checkChildren","checkAllModels","tags","$9e16048665645004$export$79159e21a6bceab7","params","body","JSON","stringify","version","fetch","method","$546dc626102bcb5a$export$f424036cf10051f4","action","AddNote","chrome","runtime","onMessage","addListener","async","message","type","addNote","response","payload","json","notificationMessage","error","console","notifications","create","iconUrl","title","tabs","query","active","currentWindow","tab","undefined","tabId","id","sendMessage","addNoteResponse"],"version":3,"file":"eventListener.js.map"}